import{a2 as p}from"./index-c208d5f4.js";const g={attack:{name:"Attack",cooldown:0,priority:"normal",description:"A basic physical attack",narrativeTemplate:"{character} {action} with {weapon}!"},spell:{name:"Cast Spell",cooldown:1,priority:"normal",description:"Cast a magical spell",narrativeTemplate:"{character} channels arcane energy into {spell}!"},special:{name:"Special Ability",cooldown:2,priority:"high",description:"Use a special class ability",narrativeTemplate:"{character} unleashes their {ability}!"},item:{name:"Use Item",cooldown:0,priority:"low",description:"Use an item or consumable",narrativeTemplate:"{character} uses {item}!"},defend:{name:"Defend",cooldown:0,priority:"high",description:"Take a defensive stance",narrativeTemplate:"{character} takes a defensive stance!"},environmental:{name:"Environmental Action",cooldown:1,priority:"normal",description:"Use the environment to your advantage",narrativeTemplate:"{character} uses the {environment} to their advantage!"},teamUp:{name:"Team Up",cooldown:3,priority:"high",description:"Coordinate with another party member",narrativeTemplate:"{character} coordinates with {ally} for a powerful combination!"}},m={priest:{primaryAttribute:"wisdom",specialAttacks:["Divine Healing","Divine Smite"],spellTypes:["healing","divine"]},wizard:{primaryAttribute:"intelligence",specialAttacks:["Fireball","Lightning","Ice","Arcane"],spellTypes:["fireball","lightning","ice","arcane"]},boss:{primaryAttribute:"strength",specialAttacks:["Devastating Strike"],spellTypes:[]},dragon:{primaryAttribute:"strength",specialAttacks:["Devastating Strike"],spellTypes:[]},undead:{primaryAttribute:"constitution",specialAttacks:["Death Touch"],spellTypes:["necrotic"]},skeleton:{primaryAttribute:"constitution",specialAttacks:["Death Touch"],spellTypes:["necrotic"]},zombie:{primaryAttribute:"constitution",specialAttacks:["Death Touch"],spellTypes:["necrotic"]}};class f{calculateInitiative(t){const e=Math.floor(Math.random()*20)+1,a=Math.floor((t.dexterity-10)/2),i=Math.floor((t.level||1)/2);return e+a+i}calculateAttackDamage(t,e,a={}){const i=this.rollDice(t.damage||"1d6"),r=Math.floor((t.strength-10)/2),s=t.level||1,n=t.weapon?this.calculateWeaponBonus(t.weapon):0,c=this.calculateClassBonus(t,"attack"),l=a.situationalBonus||0;return{damage:Math.max(1,i+r+s+n+c+l),damageType:"physical",critical:this.isCriticalHit(t,e),breakdown:{baseDamage:i,strengthModifier:r,levelBonus:s,weaponBonus:n,classBonus:c,situationalBonus:l}}}calculateSpellDamage(t,e,a={}){const i=a.spellType||"arcane",r=this.rollDice(t.spellDamage||"1d8"),s=Math.floor((t.intelligence-10)/2),n=t.level||1,c=this.calculateSpellBonus(i,t),l=this.calculateClassBonus(t,"spell");return{damage:Math.max(1,r+s+n+c+l),damageType:i,critical:this.isCriticalHit(t,e),breakdown:{baseDamage:r,intelligenceModifier:s,levelBonus:n,spellBonus:c,classBonus:l}}}calculateSpecialDamage(t,e,a={}){a.abilityType;const i=this.rollDice("2d6"),r=this.getPrimaryAttribute(t.class),s=Math.floor((t[r]-10)/2),n=(t.level||1)*2;return{damage:Math.max(1,i+s+n),damageType:"special",critical:this.isCriticalHit(t,e),breakdown:{baseDamage:i,attributeModifier:s,levelBonus:n}}}calculateItemEffect(t,e,a={}){const i=a.itemType||"healing";return i==="healing"?{effect:"healing",amount:this.rollDice("1d8")+2,target:t.id}:i==="damage"?{effect:"damage",amount:this.rollDice("1d6"),damageType:"item",target:e.id}:{effect:"none",amount:0}}calculateTeamUpDamage(t,e,a={}){const i=this.rollDice("3d6"),r=Math.floor((t.strength-10)/2),s=a.allyBonus||2;return{damage:Math.max(1,i+r+s),damageType:"physical",critical:this.isCriticalHit(t,e),breakdown:{baseDamage:i,strengthModifier:r,allyBonus:s}}}calculateEnemyDamage(t,e,a={}){var o;const i=(o=t.class)==null?void 0:o.toLowerCase(),r=m[i]||m.wizard,s=r.primaryAttribute,n=Math.floor((t[s]-10)/2);let c=this.rollDice(t.damage||"1d6"),l="physical";return(i==="boss"||i==="dragon")&&(c=Math.floor(c*1.5)),r.spellTypes.length>0&&(l=a.spellType||r.spellTypes[0],c=this.rollDice("1d8")),{damage:Math.max(1,c+n),damageType:l,critical:this.isCriticalHit(t,e),breakdown:{baseDamage:c,attributeModifier:n}}}rollDice(t){const e=t.match(/(\d+)d(\d+)/);if(!e)return 0;const[a,i,r]=e;let s=0;for(let n=0;n<parseInt(i);n++)s+=Math.floor(Math.random()*parseInt(r))+1;return s}isCriticalHit(t,e){return Math.floor(Math.random()*20)+1>=20}calculateWeaponBonus(t){return{sword:1,axe:2,bow:1,staff:0,dagger:0}[t]||0}calculateSpellBonus(t,e){return{fireball:2,lightning:3,ice:1,arcane:1,divine:2,necrotic:2}[t]||0}calculateClassBonus(t,e){var i;const a=(i=t.class)==null?void 0:i.toLowerCase();return e==="attack"&&a==="fighter"?1:e==="spell"&&a==="wizard"?2:e==="special"&&a==="rogue"?1:0}getPrimaryAttribute(t){return{fighter:"strength",wizard:"intelligence",rogue:"dexterity",cleric:"wisdom"}[t==null?void 0:t.toLowerCase()]||"strength"}getEnemyPrimaryAttribute(t){const e=m[t==null?void 0:t.toLowerCase()];return(e==null?void 0:e.primaryAttribute)||"strength"}calculateEnemyItemBonus(t){var a;const e=(a=t.class)==null?void 0:a.toLowerCase();return e==="boss"||e==="dragon"?3:e==="wizard"||e==="priest"?1:0}}const y=new f;class v{chooseEnemyAction(t,e){const a=this.getAvailableActions(t);return a.length===0?null:this.makeEnemyDecision(t,a,e)}getAvailableActions(t){var a;const e=["attack","defend"];return t.class&&["wizard","priest","mage","sorcerer"].includes(t.class.toLowerCase())&&e.push("spell"),t.class&&["boss","dragon"].includes(t.class.toLowerCase())&&e.push("special"),t.items&&t.items.length>0&&e.push("item"),((a=combatSession==null?void 0:combatSession.environmentalFeatures)==null?void 0:a.length)>0&&e.push("environmental"),e}getValidTargets(t,e,a){const i=[],r=a.combatants.filter(n=>!n.id.startsWith("enemy_")&&n.hp>0),s=a.combatants.filter(n=>n.id.startsWith("enemy_")&&n.hp>0&&n.id!==t.id);switch(e){case"attack":case"spell":i.push(...r);break;case"special":i.push(...r);break;case"item":i.push(t,...s);break;case"defend":break;case"environmental":i.push(...r);break}return i}makeEnemyDecision(t,e,a){var u;const i=this.getValidTargets(t,e[0],a);if(i.length===0)return{action:"defend",target:null,specialAttack:"Defensive Stance",damageType:"defense",attribute:"dexterity"};const r=i[Math.floor(Math.random()*i.length)],s=t.hp/t.maxHp,n=(u=t.class)==null?void 0:u.toLowerCase();if(t.level,n==="priest"||n==="cleric"){if(s<.4&&e.includes("spell"))return{action:"spell",target:t.id,spellType:"healing",specialAttack:"Divine Healing",damageType:"healing",attribute:"wisdom"};if(e.includes("spell")&&r)return{action:"spell",target:r.id,spellType:"divine",specialAttack:"Divine Smite",damageType:"radiant",attribute:"wisdom"}}if((n==="wizard"||n==="mage"||n==="sorcerer")&&e.includes("spell")){const o=["fireball","lightning","ice","arcane"],d=o[Math.floor(Math.random()*o.length)];return{action:"spell",target:r.id,spellType:d,specialAttack:`${d.charAt(0).toUpperCase()+d.slice(1)} Spell`,damageType:d==="fireball"?"fire":d==="lightning"?"lightning":d==="ice"?"cold":"arcane",attribute:"intelligence"}}if((n==="boss"||n==="dragon")&&e.includes("special"))return{action:"special",target:r.id,specialAttack:"Devastating Strike",damageType:"physical",attribute:"strength",isBossAttack:!0};if((n==="undead"||n==="skeleton"||n==="zombie")&&e.includes("spell"))return{action:"spell",target:r.id,spellType:"necrotic",specialAttack:"Death Touch",damageType:"necrotic",attribute:"constitution"};if(s<.3){if(e.includes("item"))return{action:"item",target:t.id,itemType:"healing",specialAttack:"Use Healing Potion",damageType:"healing",attribute:"constitution"};if(e.includes("defend"))return{action:"defend",target:null,specialAttack:"Defensive Stance",damageType:"defense",attribute:"dexterity"}}return a.combatants.filter(o=>o.id.startsWith("enemy_")&&o.hp/o.maxHp<.5).length>1&&e.includes("spell")?{action:"spell",target:r.id,spellType:"area",specialAttack:"Area Attack",damageType:"mixed",attribute:"intelligence"}:e.includes("attack")?{action:"attack",target:r.id,specialAttack:"Standard Attack",damageType:"physical",attribute:"strength"}:{action:e[Math.floor(Math.random()*e.length)],target:r.id,specialAttack:"Basic Action",damageType:"physical",attribute:"strength"}}async executeEnemyTurn(t,e,a){if(e.hp<=0)return{success:!1,message:`${e.name} is already defeated`};const i=this.chooseEnemyAction(e,t);return i?i.target?await a(t,e.id,i.action,i.target,{itemType:i.itemType,spellType:i.spellType,specialAttack:i.specialAttack,damageType:i.damageType,attribute:i.attribute,isBossAttack:i.isBossAttack}):await a(t,e.id,"defend",e.id,{specialAttack:i.specialAttack,damageType:i.damageType,attribute:i.attribute}):await a(t,e.id,"defend",e.id,{specialAttack:"Defensive Stance",damageType:"defense",attribute:"dexterity"})}}const w=new v;class b{generateActionNarrative(t,e,a,i){var c;let s=(((c=g[e])==null?void 0:c.narrativeTemplate)||"{character} performs an action!").replace("{character}",t.name).replace("{action}",this.getActionVerb(e,t.class)).replace("{weapon}",t.weapon||"their weapon").replace("{spell}",i.spellType||"magic").replace("{ability}",i.specialAttack||"special ability").replace("{item}",i.itemType||"item").replace("{environment}",i.environment||"surroundings").replace("{ally}",i.ally||"ally");const n=this.getClassFlavor(t.class,e);return n&&(s+=` ${n}`),a&&a.id!==t.id&&(s+=` against ${a.name}`),s}getActionVerb(t,e){const a={attack:{fighter:"swings",wizard:"casts",rogue:"strikes",cleric:"smites",default:"attacks"},spell:{wizard:"channels",cleric:"invokes",default:"casts"},special:{fighter:"unleashes",wizard:"unleashes",rogue:"executes",cleric:"blesses",default:"uses"},item:{default:"uses"},defend:{default:"defends"},environmental:{default:"utilizes"},teamUp:{default:"coordinates with"}},i=a[t]||a.attack;return i[e==null?void 0:e.toLowerCase()]||i.default}getClassFlavor(t,e){const i={fighter:{attack:"with practiced precision",special:"their martial prowess",defend:"with shield raised high"},wizard:{attack:"with arcane might",spell:"weaving intricate patterns",special:"their magical mastery"},rogue:{attack:"from the shadows",special:"their deadly precision",defend:"with nimble footwork"},cleric:{attack:"with divine authority",spell:"calling upon the gods",special:"their holy power"}}[t==null?void 0:t.toLowerCase()];return(i==null?void 0:i[e])||""}extractEnvironmentalFeatures(t){const e=[];if(!t)return e;const a=t.toLowerCase();return(a.includes("forest")||a.includes("trees"))&&e.push({name:"Dense Forest",effect:"Provides cover (+1 AC)",narrative:"The dense trees provide natural cover"}),(a.includes("cave")||a.includes("underground"))&&e.push({name:"Dark Cave",effect:"Reduced visibility (-1 to attack)",narrative:"The darkness makes it harder to aim"}),(a.includes("water")||a.includes("river"))&&e.push({name:"Water Hazard",effect:"Difficult terrain",narrative:"The water makes movement difficult"}),(a.includes("fire")||a.includes("flame"))&&e.push({name:"Burning Environment",effect:"Fire damage to all combatants",narrative:"The flames lick at all present"}),e}identifyTeamUpOpportunities(t){const e=[],a=t.some(n=>{var c;return((c=n.class)==null?void 0:c.toLowerCase())==="fighter"}),i=t.some(n=>{var c;return((c=n.class)==null?void 0:c.toLowerCase())==="wizard"}),r=t.some(n=>{var c;return((c=n.class)==null?void 0:c.toLowerCase())==="rogue"}),s=t.some(n=>{var c;return((c=n.class)==null?void 0:c.toLowerCase())==="cleric"});return a&&i&&e.push({name:"Tank and Spell",description:"Fighter distracts while Wizard casts",bonus:"+2 damage"}),r&&s&&e.push({name:"Divine Stealth",description:"Cleric blesses Rogue for enhanced stealth",bonus:"+1d6 damage"}),a&&s&&e.push({name:"Holy Warrior",description:"Cleric enhances Fighter with divine power",bonus:"+1 to all rolls"}),e}extractNarrativeElements(t){return t?{mood:this.determineCombatMood(t),stakes:this.determineStakes(t),hazards:this.identifyHazards(t),npcs:this.extractNPCs(t)}:{}}determineCombatMood(t){const e=t.toLowerCase();return e.includes("desperate")||e.includes("last stand")?"desperate":e.includes("epic")||e.includes("legendary")?"epic":e.includes("stealth")||e.includes("sneak")?"stealthy":e.includes("chaos")||e.includes("confusion")?"chaotic":"standard"}determineStakes(t){const e=t.toLowerCase();return e.includes("save the world")||e.includes("apocalypse")?"world-ending":e.includes("save the kingdom")||e.includes("royal")?"kingdom-level":e.includes("save the village")||e.includes("town")?"village-level":e.includes("personal")||e.includes("revenge")?"personal":"standard"}identifyHazards(t){const e=[],a=t.toLowerCase();return(a.includes("poison")||a.includes("toxic"))&&e.push("poison"),(a.includes("fire")||a.includes("flame"))&&e.push("fire"),(a.includes("ice")||a.includes("cold"))&&e.push("cold"),(a.includes("electricity")||a.includes("lightning"))&&e.push("lightning"),e}extractNPCs(t){const e=[];if(!t)return e;const a=t.match(/([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/g);return a&&a.forEach(i=>{["The","A","An","And","Or","But","In","On","At","To","For","Of","With","By"].includes(i)||e.push({name:i,role:"unknown",disposition:"neutral"})}),e}generateCombatSummary(t,e){const{combatants:a,round:i}=t,r=a.filter(l=>!l.id.startsWith("enemy_")),s=a.filter(l=>l.id.startsWith("enemy_")),n=r.filter(l=>l.hp>0),c=s.filter(l=>l.hp>0);return{rounds:i,partyCasualties:r.length-n.length,enemyCasualties:s.length-c.length,result:e,survivors:{party:n.map(l=>l.name),enemies:c.map(l=>l.name)}}}generateCombatNarrative(t,e){const a=this.generateCombatSummary(t,e);let i=`The battle raged for ${a.rounds} rounds. `;return e==="victory"?(i+=`The party emerged victorious, defeating ${a.enemyCasualties} enemies`,a.partyCasualties>0&&(i+=` at the cost of ${a.partyCasualties} fallen comrades`),i+="."):e==="defeat"?(i+="The party was defeated by their enemies",a.enemyCasualties>0&&(i+=`, though they managed to take ${a.enemyCasualties} enemies with them`),i+="."):i+="The battle ended in a draw, with both sides withdrawing.",i}}const k=new b;class T{constructor(){this.calculations=y,this.ai=w,this.narrative=k}initializeCombat(t,e,a){return{combatants:[...t,...e].map(s=>({...s,initiative:this.calculations.calculateInitiative(s),statusEffects:[],cooldowns:{},lastAction:null,turnCount:0})).sort((s,n)=>n.initiative-s.initiative),currentTurn:0,round:1,combatState:"active",storyContext:a,environmentalFeatures:this.narrative.extractEnvironmentalFeatures(a),teamUpOpportunities:this.narrative.identifyTeamUpOpportunities(t),narrativeElements:this.narrative.extractNarrativeElements(a)}}async createCombatSession(t,e,a,i){try{const{createCombatSession:r}=await p(()=>import("./index-c208d5f4.js").then(o=>o.a3),["assets/index-c208d5f4.js","assets/index-dbfffc4e.css"]);await this.cleanupOldCombatSessions(t);const s=await this.getExistingCombatSession(t);if(s)return s;const n=this.preparePartyMembers(e),c=this.prepareEnemies(a),l=this.initializeCombat(n,c,i);return await r(t,{storyContext:l.storyContext,partyMembers:l.combatants.filter(o=>!o.id.startsWith("enemy_")),enemies:l.combatants.filter(o=>o.id.startsWith("enemy_")),combatants:l.combatants,initiative:l.combatants.map(o=>({id:o.id,name:o.name,initiative:o.initiative})),currentTurn:l.currentTurn,round:l.round,combatState:l.combatState,environmentalFeatures:l.environmentalFeatures,teamUpOpportunities:l.teamUpOpportunities,narrativeElements:l.narrativeElements})}catch(r){throw console.error("❌ Error creating combat session:",r),r}}async getExistingCombatSession(t){try{const{getCombatSession:e}=await p(()=>import("./index-c208d5f4.js").then(i=>i.a3),["assets/index-c208d5f4.js","assets/index-dbfffc4e.css"]),a=await e(t);return a&&a.combatState==="active"?a:null}catch(e){return console.error("❌ Error getting existing combat session:",e),null}}async cleanupOldCombatSessions(t){try{const{deleteCombatSession:e}=await p(()=>import("./index-c208d5f4.js").then(a=>a.a3),["assets/index-c208d5f4.js","assets/index-dbfffc4e.css"]);await e(t)}catch(e){console.error("❌ Error cleaning up old combat sessions:",e)}}async forceCleanupCombatSessions(t){try{const{deleteCombatSession:e}=await p(()=>import("./index-c208d5f4.js").then(a=>a.a3),["assets/index-c208d5f4.js","assets/index-dbfffc4e.css"]);return await e(t),{success:!0,message:"Combat sessions cleaned up"}}catch(e){return console.error("❌ Error force cleaning up combat sessions:",e),{success:!1,message:"Failed to cleanup combat sessions"}}}preparePartyMembers(t){return t.map(e=>({...e,id:e.id||`player_${e.userId}`,hp:e.hp||e.maxHp||10,maxHp:e.maxHp||10,ac:e.ac||10,attackBonus:e.attackBonus||3,damage:e.damage||"1d6",spellDamage:e.spellDamage||"1d8",weapon:e.weapon||"sword",level:e.level||1,strength:e.strength||10,dexterity:e.dexterity||10,constitution:e.constitution||10,intelligence:e.intelligence||10,wisdom:e.wisdom||10,charisma:e.charisma||10}))}prepareEnemies(t){return t.map((e,a)=>({...e,id:e.id||`enemy_${a}`,hp:e.hp||e.maxHp||10,maxHp:e.maxHp||10,ac:e.ac||10,attackBonus:e.attackBonus||3,damage:e.damage||"1d6",level:e.level||1,strength:e.strength||10,dexterity:e.dexterity||10,constitution:e.constitution||10,intelligence:e.intelligence||10,wisdom:e.wisdom||10,charisma:e.charisma||10}))}async executeAction(t,e,a,i,r={}){try{const s=t.combatants.find(o=>o.id===e),n=t.combatants.find(o=>o.id===i);if(!s)return{success:!1,message:"Combatant not found"};if(s.hp<=0)return{success:!1,message:"Combatant is defeated"};const c=this.narrative.generateActionNarrative(s,a,n,r),l=this.calculateActionResults(s,a,n,r);this.applyActionEffects(t,s,n,l),this.updateCooldowns(t,s,a),this.checkStatusEffectApplication(s,a,n,l),this.calculateEnvironmentalImpact(t,a,l);const u=this.checkCombatEnd(t);return{success:!0,narrative:c,results:l,combatResult:u,combatSession:t}}catch(s){return console.error("❌ Error executing action:",s),{success:!1,message:"Failed to execute action"}}}calculateActionResults(t,e,a,i){switch(e){case"attack":return this.calculations.calculateAttackDamage(t,a,i);case"spell":return this.calculations.calculateSpellDamage(t,a,i);case"special":return this.calculations.calculateSpecialDamage(t,a,i);case"item":return this.calculations.calculateItemEffect(t,a,i);case"teamUp":return this.calculations.calculateTeamUpDamage(t,a,i);case"defend":return{effect:"defense",amount:2};default:return{damage:0,damageType:"none"}}}applyActionEffects(t,e,a,i){if(i.damage&&a&&(a.hp=Math.max(0,a.hp-i.damage)),i.effect==="healing"&&i.target){const r=t.combatants.find(s=>s.id===i.target);r&&(r.hp=Math.min(r.maxHp,r.hp+i.amount))}}updateCooldowns(t,e,a){var r;const i=((r=g[a])==null?void 0:r.cooldown)||0;i>0&&(e.cooldowns[a]=i)}checkStatusEffectApplication(t,e,a,i){e==="spell"&&i.damageType==="fire"&&a.statusEffects.push({type:"burned",duration:2,effect:"lose 2 HP per turn"})}calculateEnvironmentalImpact(t,e,a){t.environmentalFeatures.length>0}processStatusEffects(t,e){e.statusEffects=e.statusEffects.filter(a=>(a.duration--,a.duration>0)),e.statusEffects.forEach(a=>{if(a.effect.includes("lose")){const i=parseInt(a.effect.match(/\d+/)[0]);e.hp=Math.max(0,e.hp-i)}})}checkCombatEnd(t){const e=t.combatants.filter(s=>!s.id.startsWith("enemy_")),a=t.combatants.filter(s=>s.id.startsWith("enemy_")),i=e.filter(s=>s.hp>0),r=a.filter(s=>s.hp>0);return i.length===0?"defeat":r.length===0?"victory":null}async executeEnemyTurn(t,e){return await this.ai.executeEnemyTurn(t,e,this.executeAction.bind(this))}generateCombatSummary(t,e){return this.narrative.generateCombatSummary(t,e)}generateCombatNarrative(t,e){return this.narrative.generateCombatNarrative(t,e)}}const C=new T;export{C as c};
