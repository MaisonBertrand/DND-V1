rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user profile
    match /userProfiles/{profileId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      // Allow listing and querying for username availability checks (needed during registration)
      allow list, get: if true; // Allow anyone to check username availability
    }
    
    // Users can access characters within parties they're members of
    match /characters/{characterId} {
      // Allow reading if user is a member of the party OR if they own the character
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
          request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members));
      
      // Allow writing if user owns the character
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow deletion if user is the DM of the party (for party disbanding)
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         (exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
          request.auth.uid == get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.dmId));
      
      // Allow creating if user is a member of the party
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
      
      // Allow listing characters for party members
      allow list: if request.auth != null;
    }
    
    // Users can only access parties they are members of, with exceptions for joining
    match /parties/{partyId} {
      // Allow reading if user is a member OR for invite code validation
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.members || true);
      
      // Allow writing if user is a member OR if they're joining (adding themselves to members)
      allow write: if request.auth != null && 
        (request.auth.uid in resource.data.members || 
         // Allow joining: user can only add themselves to the members array
         (request.auth.uid in request.resource.data.members && 
          !(request.auth.uid in resource.data.members) &&
          // Ensure they're only adding themselves, not removing others
          request.resource.data.members.hasAll(resource.data.members)));
      
      // Allow deletion if user is the DM (party leader)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.dmId;
      
      allow create: if request.auth != null && request.auth.uid == request.resource.data.dmId;
      // Allow listing parties where user is a member (needed for getUserParties query)
      // Also allow listing for invite code searches
      allow list: if request.auth != null;
    }
    
    // Users can only access campaigns for parties they are members of
    match /campaigns/{campaignId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members;
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
      // Allow deletion if user is the DM of the party
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid == get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.dmId;
    }
    
    // Users can only access combats for parties they are members of
    match /combats/{combatId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members;
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
      // Allow deletion if user is the DM of the party
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid == get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.dmId;
    }
    
    // Users can only access combat sessions for parties they are members of
    match /combatSessions/{sessionId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members;
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
      // Allow deletion if user is the DM of the party
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid == get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.dmId;
    }
    
    // Users can only access campaign stories for parties they are members of
    // Made less restrictive to allow manual campaign creation
    match /campaignStories/{storyId} {
      allow read, write: if request.auth != null && 
        (exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
         request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members);
      allow create: if request.auth != null && 
        (exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
         request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members);
      // Allow deletion if user is the DM of the party (for party disbanding)
      allow delete: if request.auth != null && 
        (exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
         request.auth.uid == get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.dmId);
      // Allow listing for party members
      allow list: if request.auth != null;
    }
    
    // Character presets - users can only access their own presets
    match /characterPresets/{presetId} {
      allow read, write, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow list: if request.auth != null;
    }
  }
} 