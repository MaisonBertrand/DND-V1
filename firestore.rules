rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own characters
    match /characters/{characterId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Users can only access parties they are members of
    match /parties/{partyId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.members;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.dmId;
    }
    
    // Users can only access campaigns for parties they are members of
    match /campaigns/{campaignId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members;
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
    }
    
    // Users can only access combats for parties they are members of
    match /combats/{combatId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(resource.data.partyId)).data.members;
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/parties/$(request.resource.data.partyId)) &&
        request.auth.uid in get(/databases/$(database)/documents/parties/$(request.resource.data.partyId)).data.members;
    }
  }
} 